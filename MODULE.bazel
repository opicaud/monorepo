module(
    name="monorepo",
    version=""
)
bazel_dep(name = "grpc-eventstore", version = "")
local_path_override(
    module_name= "grpc-eventstore",
    path = "grpc-eventstore",
)
bazel_dep(name = "cqrs", version = "1.0.0")
local_path_override(
    module_name = "cqrs",
    path = "cqrs",
)
bazel_dep(name = "shape-app", version = "")
local_path_override(
    module_name = "shape-app",
    path = "shape-app",
)
bazel_dep(name = "platforms", version = "0.0.10")

bazel_dep(name = "rules_pact", version = "1.3.0")
archive_override(
    module_name = "rules_pact",
    urls = ["https://github.com/opicaud/rules_pact/archive/refs/tags/v1.3.0.tar.gz"],
    strip_prefix = "rules_pact-1.3.0",
    integrity = "sha256-okVwSG/WnYjof8xp1uYutJ+zX3tMp9v4q9yn0PezLzI="
)
bazel_dep(name = "hack", version = "")
local_path_override(
    module_name = "hack",
    path = "hack",
)
bazel_dep(name = "apple_support", version = "1.8.1")
bazel_dep(name = "stardoc", version = "0.6.2")

rules_pact = use_extension("@rules_pact//:extensions.bzl", "rules_pact")
rules_pact.options()
use_repo(
    rules_pact,
    "pact_protobuf_plugin_archive_darwin_amd64",
    "pact_protobuf_plugin_archive_linux_amd64",
    "pact_protobuf_plugin_archive_darwin_arm64",
    "pact_plugin_json_archive",
    "pact_verifier_cli_archive_darwin_amd64",
    "pact_verifier_cli_archive_darwin_arm64",
    "pact_verifier_cli_archive_linux_amd64",
    "pact_ffi_archive_darwin_amd64",
    "pact_ffi_archive_linux_amd64",
    "pact_ffi_archive_darwin_arm64",
    "pact_protobuf_plugin_osx_x86_64_toolchain",
    "pact_protobuf_plugin_linux_x86_64_toolchain",
    "pact_protobuf_plugin_osx_aarch64_toolchain",
    "pact_reference_osx_x86_64_toolchain",
    "pact_reference_linux_x86_64_toolchain",
    "pact_reference_osx_aarch64_toolchain"
)
register_toolchains("@pact_protobuf_plugin_osx_x86_64_toolchain//:toolchain")
register_toolchains("@pact_protobuf_plugin_linux_x86_64_toolchain//:toolchain")
register_toolchains("@pact_protobuf_plugin_osx_aarch64_toolchain//:toolchain")
register_toolchains("@pact_reference_osx_x86_64_toolchain//:toolchain")
register_toolchains("@pact_reference_linux_x86_64_toolchain//:toolchain")
register_toolchains("@pact_reference_osx_aarch64_toolchain//:toolchain")

bazel_dep(name = "rules_go", version = "0.47.1", repo_name = "io_bazel_rules_go")
bazel_dep(name = "gazelle", version = "0.36.0", repo_name = "bazel_gazelle")

bazel_dep(name = "bazel_skylib", version = "1.5.0")

bazel_dep(name = "aspect_bazel_lib", version = "2.1.0")
bazel_dep(name = "rules_helm", version = "0.3.2")
git_override(
    module_name="rules_helm",
    commit = "d166f201d17f25adadaeebbf4995594da094951e",
    remote = "https://github.com/abrisco/rules_helm/"
)
bazel_dep(name = "rules_build_secrets", version = "0.0.0", repo_name = "environment_secrets")
git_override(
    module_name = "rules_build_secrets",
    commit = "c7a0d784a73c369e9932270bfb859a3b2c653716",
    remote = "https://github.com/opicaud/rules_build_secrets/"
)
rules_build_secrets = use_extension("@environment_secrets//lib:extensions.bzl", "rules_build_secrets")
rules_build_secrets.options(
    name = "env",
    entries = {
            "GH_TOKEN": "default",
    },
)
use_repo(rules_build_secrets, "env")

bazel_dep(name = "rules_pkg", version = "0.10.1")
bazel_dep(name = "rules_oci", version = "1.7.5")
bazel_dep(name = "container_structure_test", version = "1.16.0")

bazel_dep(name = "aspect_rules_js", version = "1.38.0")
bazel_dep(name = "rules_nodejs", version = "6.1.0")
node = use_extension("@rules_nodejs//nodejs:extensions.bzl", "node")
node.toolchain(node_version = "20.12.1")
npm = use_extension("@aspect_rules_js//npm:extensions.bzl", "npm", dev_dependency = True)
npm.npm_translate_lock(
    name = "npm",
    data = ["//hack:package.json"],
    pnpm_lock = "//hack:pnpm-lock.yaml",
    update_pnpm_lock = True,
)
use_repo(npm, "npm", "npm__semantic-release__23.1.1")

oci = use_extension("@rules_oci//oci:extensions.bzl", "oci")
oci.pull(
    name = "distroless_go",
    digest = "sha256:0530d193888bcd7bd0376c8b34178ea03ddb0b2b18caf265135b6d3a393c8d05",
    image = "gcr.io/distroless/base"
)
use_repo(oci, "distroless_go")

go_deps = use_extension("@bazel_gazelle//:extensions.bzl", "go_deps")
go_deps.module_override(
    patches = [
        "//pact-helper:pact_ffi.patch",
    ],
    path = "github.com/pact-foundation/pact-go/v2",
)

go_deps.gazelle_override(
    directives = [
        "gazelle:proto disable_global",
    ],
    path = "github.com/pact-foundation/pact-go/v2",
)

use_repo(
    go_deps,
    "com_github_google_uuid",
    "org_golang_google_grpc",
    "com_github_cucumber_godog",
    "com_github_spf13_viper",
    "com_github_grpc_ecosystem_grpc_gateway_v2",
    "com_github_stretchr_testify",
    "org_golang_x_mod",
    "com_github_pact_foundation_pact_go_v2",
    "com_github_smarty_assertions",
    "com_github_beorn7_floats",
    "com_github_davecgh_go_spew",
    "com_github_spf13_pflag",
    "com_github_hashicorp_logutils",
    "com_github_urfave_cli_v3",
    "org_golang_x_exp",
    "io_opentelemetry_go_contrib_instrumentation_google_golang_org_grpc_otelgrpc",
    "io_opentelemetry_go_otel_sdk",
    "io_opentelemetry_go_otel",
    "io_opentelemetry_go_otel_trace",
    "io_opentelemetry_go_otel_exporters_otlp_otlptrace_otlptracegrpc",
    "com_github_grpc_ecosystem_go_grpc_middleware_v2")
